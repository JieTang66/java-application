/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Business.Car;
import Business.CarInformationList;
import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jasper
 */
public class ViewJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewJFrame
     */
    private JPanel userProcessContainer;
    private CarInformationList carInformation;
    private Car car;
    private List<Car> carl=new ArrayList<>();
    ViewJPanel(JPanel userProcessContainer, CarInformationList carInformation) {
        initComponents();
        this.carInformation = carInformation;
        this.userProcessContainer = userProcessContainer;
        this.car = car;
        this.carl= carl;
        populateTable();
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        txtDate.setText(df.format(new Date()));
    }

    public void populateTable(){
        DefaultTableModel dtm = (DefaultTableModel)tblCar.getModel();   
        dtm.setRowCount(0);
        
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        txtDate.setText(df.format(new Date()));
        for(Car car:carInformation.carList){
            Object[] row = new Object[9];
            row[0] = car;
            row[1] = car.getBrand();
            row[2] = car.getMin_seats();
            row[3] = car.getMax_seats();
            row[4] = car.isAvailable();
            row[5] = car.getManufactured_year();
            row[6] = car.getSerial_num();
            row[7] = car.getModel_num();
            row[8] = car.isMaintenance_certificate();
            dtm.addRow(row);
          
        }
        
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblCar = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        btnViewDetails = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnFirst = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        txtAvailNum = new javax.swing.JButton();
        btnBrand = new javax.swing.JButton();
        btnMyear = new javax.swing.JButton();
        btnSeats = new javax.swing.JButton();
        btnSerial = new javax.swing.JButton();
        txtSearch2 = new javax.swing.JTextField();
        btnModel = new javax.swing.JButton();
        btnManufacturer = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtDate = new javax.swing.JTextField();
        btnCity = new javax.swing.JButton();
        btnCertificate = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnMutiSearch = new javax.swing.JButton();
        btnMutiSearch1 = new javax.swing.JButton();
        btnMutiSearch2 = new javax.swing.JButton();
        btnMutiSearch3 = new javax.swing.JButton();
        btnMutiSearch4 = new javax.swing.JButton();
        btnMutiSearch5 = new javax.swing.JButton();
        btnMutiSearch6 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        btnAvailCar = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 204, 255));

        tblCar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "AvailableCity", "Brand", "MinSeats", "MaxSeats", "isAvailable", "manufac Year", "serial", "model", "isMCertificate"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCar);

        btnBack.setText("<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnViewDetails.setText("View Details");
        btnViewDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewDetailsActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnFirst.setText("First avail car");
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });

        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });

        txtAvailNum.setText("avail car number");
        txtAvailNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAvailNumActionPerformed(evt);
            }
        });

        btnBrand.setText("Find by brand");
        btnBrand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrandActionPerformed(evt);
            }
        });

        btnMyear.setText("Find by manufactory year");
        btnMyear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMyearActionPerformed(evt);
            }
        });

        btnSeats.setText("Find by seats");
        btnSeats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeatsActionPerformed(evt);
            }
        });

        btnSerial.setText("Find by serial number");
        btnSerial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSerialActionPerformed(evt);
            }
        });

        btnModel.setText("Find by model number");
        btnModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModelActionPerformed(evt);
            }
        });

        btnManufacturer.setText("Find manufacturers");
        btnManufacturer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManufacturerActionPerformed(evt);
            }
        });

        jLabel1.setText("Last updated time");

        txtDate.setEditable(false);
        txtDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDateActionPerformed(evt);
            }
        });

        btnCity.setText("Find by city");
        btnCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCityActionPerformed(evt);
            }
        });

        btnCertificate.setText("expire the certificate");
        btnCertificate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCertificateActionPerformed(evt);
            }
        });

        btnRefresh.setText("refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnMutiSearch.setBackground(new java.awt.Color(0, 0, 0));
        btnMutiSearch.setForeground(new java.awt.Color(204, 204, 255));
        btnMutiSearch.setText("Find by brand");
        btnMutiSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMutiSearchActionPerformed(evt);
            }
        });

        btnMutiSearch1.setBackground(new java.awt.Color(0, 0, 0));
        btnMutiSearch1.setForeground(new java.awt.Color(204, 204, 255));
        btnMutiSearch1.setText("Find by manufactory year");
        btnMutiSearch1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMutiSearch1ActionPerformed(evt);
            }
        });

        btnMutiSearch2.setBackground(new java.awt.Color(0, 0, 0));
        btnMutiSearch2.setForeground(new java.awt.Color(204, 204, 255));
        btnMutiSearch2.setText("Find by serial number");
        btnMutiSearch2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMutiSearch2ActionPerformed(evt);
            }
        });

        btnMutiSearch3.setBackground(new java.awt.Color(0, 0, 0));
        btnMutiSearch3.setForeground(new java.awt.Color(204, 204, 255));
        btnMutiSearch3.setText("Find by model number");
        btnMutiSearch3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMutiSearch3ActionPerformed(evt);
            }
        });

        btnMutiSearch4.setBackground(new java.awt.Color(0, 0, 0));
        btnMutiSearch4.setForeground(new java.awt.Color(204, 204, 255));
        btnMutiSearch4.setText("Find by city");
        btnMutiSearch4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMutiSearch4ActionPerformed(evt);
            }
        });

        btnMutiSearch5.setBackground(new java.awt.Color(0, 0, 0));
        btnMutiSearch5.setForeground(new java.awt.Color(204, 204, 255));
        btnMutiSearch5.setText("expire the certificate");
        btnMutiSearch5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMutiSearch5ActionPerformed(evt);
            }
        });

        btnMutiSearch6.setBackground(new java.awt.Color(0, 0, 0));
        btnMutiSearch6.setForeground(new java.awt.Color(204, 204, 255));
        btnMutiSearch6.setText("Find by seats");
        btnMutiSearch6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMutiSearch6ActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(0, 0, 0));
        jLabel2.setForeground(new java.awt.Color(0, 0, 204));
        jLabel2.setText("Multiple conditional search area");

        btnAvailCar.setBackground(new java.awt.Color(0, 0, 0));
        btnAvailCar.setForeground(new java.awt.Color(204, 204, 255));
        btnAvailCar.setText("Available car");
        btnAvailCar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAvailCarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBack)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 788, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnViewDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRefresh))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSearch2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(btnAvailCar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnMutiSearch, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnBrand, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnFirst, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtAvailNum, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnMutiSearch1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnMyear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnModel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnSerial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnMutiSearch2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnMutiSearch3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(61, 61, 61)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnCertificate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnManufacturer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSeats, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnMutiSearch4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnMutiSearch5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnMutiSearch6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBack))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnViewDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRefresh))
                .addGap(1, 1, 1)
                .addComponent(btnDelete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearch2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSeats))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFirst)
                    .addComponent(btnManufacturer)
                    .addComponent(btnMyear))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAvailNum)
                    .addComponent(btnCity)
                    .addComponent(btnSerial))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBrand)
                    .addComponent(btnModel)
                    .addComponent(btnCertificate))
                .addGap(19, 19, 19)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnMutiSearch)
                    .addComponent(btnMutiSearch2)
                    .addComponent(btnMutiSearch4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnMutiSearch1)
                    .addComponent(btnMutiSearch3)
                    .addComponent(btnMutiSearch5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnMutiSearch6)
                    .addComponent(btnAvailCar))
                .addContainerGap(30, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnViewDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewDetailsActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblCar.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null, "please select a row from the table first to view details","Warning",JOptionPane.WARNING_MESSAGE);
        }else{
            Car car = (Car)tblCar.getValueAt(selectedRow,0);
            DetailJPanel panel = new DetailJPanel(userProcessContainer,car);
            userProcessContainer.add("DetailJPanel",panel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
    }//GEN-LAST:event_btnViewDetailsActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblCar.getSelectedRow();
        if(selectedRow >= 0){
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null,"would you like to delete the car details", "warning", dialogButton);
            if(dialogResult == JOptionPane.YES_OPTION){
                
                Car car = (Car)tblCar.getValueAt(selectedRow, 0);
                carInformation.deleteCar(car);
                populateTable();
            }
        }else{
            JOptionPane.showMessageDialog(null, "please select a row from the table first","Warning",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        // TODO add your handling code here:
        ArrayList<Car> carList2= carInformation.searchIsAvail(true);
        if(carList2.size()>0){
            DefaultTableModel dtm = (DefaultTableModel)tblCar.getModel();
            dtm.setRowCount(0);
            Object[] row = new Object[dtm.getColumnCount()];
            for(Car result : carList2){
                row[0] = result;
                row[1] = result.getBrand();
                row[2] = result.getMin_seats();
                row[3] = result.getMax_seats();
                row[4] = result.isAvailable();
                row[5] = result.getManufactured_year();
                row[6] = result.getSerial_num();
                row[7] = result.getModel_num();
                row[8] = result.isMaintenance_certificate();
            
                dtm.addRow(row);
                break;
            }
        }else{
            JOptionPane.showMessageDialog(null, "no avail","Information",JOptionPane.INFORMATION_MESSAGE);
   
        } 
         
    }//GEN-LAST:event_btnFirstActionPerformed

    private void txtAvailNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAvailNumActionPerformed
        // TODO add your handling code here:
        int m=0;
        int n=0;
        carl.clear();
        for(Car car:carInformation.carList){
            if(car.isAvailable()){
                m++;
                carl.add(car);
            }else{
                n++;
            }
        }
        
        txtSearch.setText("How many cars available:"+m);
        txtSearch2.setText("How many cars not available:"+n);
    }//GEN-LAST:event_txtAvailNumActionPerformed

    private void btnBrandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrandActionPerformed
        // TODO add your handling code here:
        String inputValue = JOptionPane.showInputDialog("Please input a value"); 
        ArrayList<Car> carList2= carInformation.searchBrand(inputValue);
        if(carList2.size()==0){
            JOptionPane.showMessageDialog(null, "Brand you entered does not exist","Information",JOptionPane.INFORMATION_MESSAGE);
        }else{
            DefaultTableModel dtm = (DefaultTableModel)tblCar.getModel();
            dtm.setRowCount(0);
            Object[] row = new Object[dtm.getColumnCount()];
            carl.clear();
            for(Car result : carList2){
                row[0] = result;
                row[1] = result.getBrand();
                row[2] = result.getMin_seats();
                row[3] = result.getMax_seats();
                row[4] = result.isAvailable();
                row[5] = result.getManufactured_year();
                row[6] = result.getSerial_num();
                row[7] = result.getModel_num();
                row[8] = result.isMaintenance_certificate();
                dtm.addRow(row); 
                
                
                carl.add(result);
            }
        }
        
        
    }//GEN-LAST:event_btnBrandActionPerformed

    private void btnMyearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMyearActionPerformed
        // TODO add your handling code here:
        try{
            String inputValue = JOptionPane.showInputDialog("Please input a value"); 
        ArrayList<Car> carList2= carInformation.searchMyear(Integer.parseInt(inputValue));
        if(carList2.size()>0){
            DefaultTableModel dtm = (DefaultTableModel)tblCar.getModel();
            dtm.setRowCount(0);
            Object[] row = new Object[dtm.getColumnCount()];
            carl.clear();
            for(Car result : carList2){
                row[0] = result;
                row[1] = result.getBrand();
                row[2] = result.getMin_seats();
                row[3] = result.getMax_seats();
                row[4] = result.isAvailable();
                row[5] = result.getManufactured_year();
                row[6] = result.getSerial_num();
                row[7] = result.getModel_num();
                row[8] = result.isMaintenance_certificate();
            
                dtm.addRow(row); 
                
                
                carl.add(result);
            }
            
        }else{
            JOptionPane.showMessageDialog(null, "Manufactory Year you entered does not exist","Information",JOptionPane.INFORMATION_MESSAGE);
   
        }
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Please type in a number for Myear");
            return;
        }
        
    }//GEN-LAST:event_btnMyearActionPerformed

    private void btnSeatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeatsActionPerformed
        // TODO add your handling code here:
       // if(txtSearch.getText().equals("")||txtSearch2.getText().equals("")){
         //   JOptionPane.showMessageDialog(null, "please enter the seat number","Information",JOptionPane.INFORMATION_MESSAGE);
   
        //}
        
        try{
            ArrayList<Car> carList2= carInformation.searchSeats(Integer.parseInt(txtSearch.getText()),Integer.parseInt(txtSearch2.getText()));
            if(carList2.size()>0){
                DefaultTableModel dtm = (DefaultTableModel)tblCar.getModel();
                dtm.setRowCount(0);
                Object[] row = new Object[dtm.getColumnCount()];
                carl.clear();
                for(Car result : carList2){
                    row[0] = result;
                    row[1] = result.getBrand();
                    row[2] = result.getMin_seats();
                    row[3] = result.getMax_seats();
                    row[4] = result.isAvailable();
                    row[5] = result.getManufactured_year();
                    row[6] = result.getSerial_num();
                    row[7] = result.getModel_num();
                    row[8] = result.isMaintenance_certificate();
            
                    dtm.addRow(row);  
                    
                    
                    carl.add(result);
                }
            
            }else{
                JOptionPane.showMessageDialog(null, "seats you entered does not exist","Information",JOptionPane.INFORMATION_MESSAGE);
   
            }
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Please type in a number for seats");
            return;
        }
        
    }//GEN-LAST:event_btnSeatsActionPerformed

    private void btnSerialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSerialActionPerformed
        // TODO add your handling code here:
        try{
            String inputValue = JOptionPane.showInputDialog("Please input a value"); 
        ArrayList<Car> carList2= carInformation.searchSerial(Integer.parseInt(inputValue));
        if(carList2.size()>0){
            DefaultTableModel dtm = (DefaultTableModel)tblCar.getModel();
            dtm.setRowCount(0);
            Object[] row = new Object[dtm.getColumnCount()];
            carl.clear();
            for(Car result : carList2){
                row[0] = result;
                row[1] = result.getBrand();
                row[2] = result.getMin_seats();
                row[3] = result.getMax_seats();
                row[4] = result.isAvailable();
                row[5] = result.getManufactured_year();
                row[6] = result.getSerial_num();
                row[7] = result.getModel_num();
                row[8] = result.isMaintenance_certificate();
            
                dtm.addRow(row); 

                carl.add(result);
            }
            
        }else{
            JOptionPane.showMessageDialog(null, "serial number you entered does not exist","Information",JOptionPane.INFORMATION_MESSAGE);
   
        }
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Please type in a number for serial");
            return;
        }
        
        
    }//GEN-LAST:event_btnSerialActionPerformed

    private void btnModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModelActionPerformed
        // TODO add your handling code here:
        String inputValue = JOptionPane.showInputDialog("Please input a value"); 
        ArrayList<Car> carList2= carInformation.searchModel(inputValue);
        if(carList2.size()>0){
            DefaultTableModel dtm = (DefaultTableModel)tblCar.getModel();
            dtm.setRowCount(0);
            Object[] row = new Object[dtm.getColumnCount()];
            carl.clear();
            for(Car result : carList2){
                row[0] = result;
                row[1] = result.getBrand();
                row[2] = result.getMin_seats();
                row[3] = result.getMax_seats();
                row[4] = result.isAvailable();
                row[5] = result.getManufactured_year();
                row[6] = result.getSerial_num();
                row[7] = result.getModel_num();
                row[8] = result.isMaintenance_certificate();
            
                dtm.addRow(row);   
                
                carl.add(result);
            }
            
        }else{
            JOptionPane.showMessageDialog(null, "model you entered does not exist","Information",JOptionPane.INFORMATION_MESSAGE);
   
        }
    }//GEN-LAST:event_btnModelActionPerformed

    private void btnManufacturerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManufacturerActionPerformed
        // TODO add your handling code here:
        String tmp = "";
        String[] tmp2 = new String[carInformation.carList.size()];
        int i=0;
        while(i<carInformation.carList.size()){
            for(Car car : carInformation.carList){ 
                if(!Arrays.asList(tmp2).contains(car.getBrand())){
                    tmp2[i]=car.getBrand();
                //i++;   
                    tmp = tmp+"  "+car.getBrand();       
                }
                i++;
            }
        }
        
        JOptionPane.showMessageDialog(null, "All the Manufacturers used by Uber:"+tmp, "Result", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnManufacturerActionPerformed

    private void btnCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCityActionPerformed
        // TODO add your handling code here:
        String inputValue = JOptionPane.showInputDialog("Please input a value"); 
        ArrayList<Car> carList2= carInformation.searchAvail_city(inputValue);
        if(carList2.size()>0){
            DefaultTableModel dtm = (DefaultTableModel)tblCar.getModel();
            dtm.setRowCount(0);
            Object[] row = new Object[dtm.getColumnCount()];
            carl.clear();
            for(Car result : carList2){
                row[0] = result;
                row[1] = result.getBrand();
                row[2] = result.getMin_seats();
                row[3] = result.getMax_seats();
                row[4] = result.isAvailable();
                row[5] = result.getManufactured_year();
                row[6] = result.getSerial_num();
                row[7] = result.getModel_num();
                row[8] = result.isMaintenance_certificate();
                
                carl.add(result);
                dtm.addRow(row);    
               
            }
            
        }else{
            JOptionPane.showMessageDialog(null, "city you entered does not exist","Information",JOptionPane.INFORMATION_MESSAGE);
   
        }
    }//GEN-LAST:event_btnCityActionPerformed

    private void btnCertificateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCertificateActionPerformed
        // TODO add your handling code here:
        ArrayList<Car> carList2= carInformation.searchMC(false);
        if(carList2.size()>0){
            DefaultTableModel dtm = (DefaultTableModel)tblCar.getModel();
            dtm.setRowCount(0);
            Object[] row = new Object[dtm.getColumnCount()];
            carl.clear();
            for(Car result : carList2){
                row[0] = result;
                row[1] = result.getBrand();
                row[2] = result.getMin_seats();
                row[3] = result.getMax_seats();
                row[4] = result.isAvailable();
                row[5] = result.getManufactured_year();
                row[6] = result.getSerial_num();
                row[7] = result.getModel_num();
                row[8] = result.isMaintenance_certificate();
            
                dtm.addRow(row);    
               
                carl.add(result);
            }
        }else{
            JOptionPane.showMessageDialog(null, "no expire","Information",JOptionPane.INFORMATION_MESSAGE);
   
        } 
     
    }//GEN-LAST:event_btnCertificateActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        DefaultTableModel dtm = (DefaultTableModel)tblCar.getModel();
            dtm.setRowCount(0);
            Object[] row = new Object[dtm.getColumnCount()];
            carl.clear();
            for(Car result : carInformation.carList){
                row[0] = result;
                row[1] = result.getBrand();
                row[2] = result.getMin_seats();
                row[3] = result.getMax_seats();
                row[4] = result.isAvailable();
                row[5] = result.getManufactured_year();
                row[6] = result.getSerial_num();
                row[7] = result.getModel_num();
                row[8] = result.isMaintenance_certificate();
            
                dtm.addRow(row);   
                
               
                carl.add(result);
            }
        txtSearch.setText("");
        txtSearch2.setText("");
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void txtDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDateActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtDateActionPerformed

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchActionPerformed

    private void btnMutiSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMutiSearchActionPerformed
        // TODO add your handling code here:
        String inputValue = JOptionPane.showInputDialog("Please input a value"); 
        List<Car> rs = new ArrayList<>();
        ArrayList<Car> carList2= carInformation.searchBrand(inputValue);
        Set<Car> set = new HashSet<Car>(carList2.size() > carl.size() ? carList2 : carl);
        
        for(Car i : carList2.size() > carl.size() ? carl:carList2)
        {
            if(set.contains(i))
            {
                rs.add(i);
            }
        }
     
        if(rs.size()>0){
            DefaultTableModel dtm = (DefaultTableModel)tblCar.getModel();
            dtm.setRowCount(0);
            Object[] row = new Object[dtm.getColumnCount()];
            for(Car result : rs){
                row[0] = result;
                row[1] = result.getBrand();
                row[2] = result.getMin_seats();
                row[3] = result.getMax_seats();
                row[4] = result.isAvailable();
                row[5] = result.getManufactured_year();
                row[6] = result.getSerial_num();
                row[7] = result.getModel_num();
                row[8] = result.isMaintenance_certificate();
                dtm.addRow(row); 
                    
            }
        }else{
             JOptionPane.showMessageDialog(null, "Brand you entered does not exist","Information",JOptionPane.INFORMATION_MESSAGE);

        }
        
    }//GEN-LAST:event_btnMutiSearchActionPerformed

    private void btnMutiSearch1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMutiSearch1ActionPerformed
        // TODO add your handling code here:
        try{
        String inputValue = JOptionPane.showInputDialog("Please input a value"); 
        List<Car> rs = new ArrayList<>();
        ArrayList<Car> carList2= carInformation.searchMyear(Integer.parseInt(inputValue));
        Set<Car> set = new HashSet<Car>(carList2.size() > carl.size() ? carList2 : carl);
        
        for(Car i : carList2.size() > carl.size() ? carl:carList2)
        {
            if(set.contains(i))
            {
                rs.add(i);
            }
        }
     
        if(rs.size()>0){
            DefaultTableModel dtm = (DefaultTableModel)tblCar.getModel();
            dtm.setRowCount(0);
            Object[] row = new Object[dtm.getColumnCount()];
            for(Car result : rs){
                row[0] = result;
                row[1] = result.getBrand();
                row[2] = result.getMin_seats();
                row[3] = result.getMax_seats();
                row[4] = result.isAvailable();
                row[5] = result.getManufactured_year();
                row[6] = result.getSerial_num();
                row[7] = result.getModel_num();
                row[8] = result.isMaintenance_certificate();
                dtm.addRow(row); 
                    
            }
        }else{
             JOptionPane.showMessageDialog(null, "Myear you entered does not exist","Information",JOptionPane.INFORMATION_MESSAGE);

        }
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "cancel");
            return;
        }
    }//GEN-LAST:event_btnMutiSearch1ActionPerformed

    private void btnMutiSearch2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMutiSearch2ActionPerformed
        // TODO add your handling code here:
        try{
        String inputValue = JOptionPane.showInputDialog("Please input a value"); 
        List<Car> rs = new ArrayList<>();
        ArrayList<Car> carList2= carInformation.searchSerial(Integer.parseInt(inputValue));
        Set<Car> set = new HashSet<Car>(carList2.size() > carl.size() ? carList2 : carl);
        
        for(Car i : carList2.size() > carl.size() ? carl:carList2)
        {
            if(set.contains(i))
            {
                rs.add(i);
            }
        }
     
        if(rs.size()>0){
            DefaultTableModel dtm = (DefaultTableModel)tblCar.getModel();
            dtm.setRowCount(0);
            Object[] row = new Object[dtm.getColumnCount()];
            for(Car result : rs){
                row[0] = result;
                row[1] = result.getBrand();
                row[2] = result.getMin_seats();
                row[3] = result.getMax_seats();
                row[4] = result.isAvailable();
                row[5] = result.getManufactured_year();
                row[6] = result.getSerial_num();
                row[7] = result.getModel_num();
                row[8] = result.isMaintenance_certificate();
                dtm.addRow(row); 
                    
            }
        }else{
             JOptionPane.showMessageDialog(null, "serial number you entered does not exist","Information",JOptionPane.INFORMATION_MESSAGE);

        }
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "cancel");
            return;
        }
    }//GEN-LAST:event_btnMutiSearch2ActionPerformed

    private void btnMutiSearch3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMutiSearch3ActionPerformed
        // TODO add your handling code here:
        String inputValue = JOptionPane.showInputDialog("Please input a value"); 
        List<Car> rs = new ArrayList<>();
        ArrayList<Car> carList2= carInformation.searchModel(inputValue);
        Set<Car> set = new HashSet<Car>(carList2.size() > carl.size() ? carList2 : carl);
        
        for(Car i : carList2.size() > carl.size() ? carl:carList2)
        {
            if(set.contains(i))
            {
                rs.add(i);
            }
        }
     
        if(rs.size()>0){
            DefaultTableModel dtm = (DefaultTableModel)tblCar.getModel();
            dtm.setRowCount(0);
            Object[] row = new Object[dtm.getColumnCount()];
            for(Car result : rs){
                row[0] = result;
                row[1] = result.getBrand();
                row[2] = result.getMin_seats();
                row[3] = result.getMax_seats();
                row[4] = result.isAvailable();
                row[5] = result.getManufactured_year();
                row[6] = result.getSerial_num();
                row[7] = result.getModel_num();
                row[8] = result.isMaintenance_certificate();
                dtm.addRow(row); 
                    
            }
        }else{
             JOptionPane.showMessageDialog(null, "Model number you entered does not exist","Information",JOptionPane.INFORMATION_MESSAGE);

        }
    }//GEN-LAST:event_btnMutiSearch3ActionPerformed

    private void btnMutiSearch4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMutiSearch4ActionPerformed
        // TODO add your handling code here:
        
        String inputValue = JOptionPane.showInputDialog("Please input a value"); 
        List<Car> rs = new ArrayList<>();
        ArrayList<Car> carList2= carInformation.searchAvail_city(inputValue);
        Set<Car> set = new HashSet<Car>(carList2.size() > carl.size() ? carList2 : carl);
        
        for(Car i : carList2.size() > carl.size() ? carl:carList2)
        {
            if(set.contains(i))
            {
                rs.add(i);
            }
        }
     
        if(rs.size()>0){
            DefaultTableModel dtm = (DefaultTableModel)tblCar.getModel();
            dtm.setRowCount(0);
            Object[] row = new Object[dtm.getColumnCount()];
            for(Car result : rs){
                row[0] = result;
                row[1] = result.getBrand();
                row[2] = result.getMin_seats();
                row[3] = result.getMax_seats();
                row[4] = result.isAvailable();
                row[5] = result.getManufactured_year();
                row[6] = result.getSerial_num();
                row[7] = result.getModel_num();
                row[8] = result.isMaintenance_certificate();
                dtm.addRow(row); 
                    
            }
        }else{
             JOptionPane.showMessageDialog(null, "city you entered does not exist","Information",JOptionPane.INFORMATION_MESSAGE);

        }
        
        
    }//GEN-LAST:event_btnMutiSearch4ActionPerformed

    private void btnMutiSearch5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMutiSearch5ActionPerformed
        // TODO add your handling code here:
       // String inputValue = JOptionPane.showInputDialog("Please input a value"); 
        
        
        
            List<Car> rs = new ArrayList<>();
            ArrayList<Car> carList2= carInformation.searchMC(false);
            Set<Car> set = new HashSet<Car>(carList2.size() > carl.size() ? carList2 : carl);
        
            for(Car i : carList2.size() > carl.size() ? carl:carList2)
            {
                if(set.contains(i))
                {
                    rs.add(i);
                }
            }
     
            if(rs.size()>0){
                DefaultTableModel dtm = (DefaultTableModel)tblCar.getModel();
                dtm.setRowCount(0);
                Object[] row = new Object[dtm.getColumnCount()];
            for(Car result : rs){
                row[0] = result;
                row[1] = result.getBrand();
                row[2] = result.getMin_seats();
                row[3] = result.getMax_seats();
                row[4] = result.isAvailable();
                row[5] = result.getManufactured_year();
                row[6] = result.getSerial_num();
                row[7] = result.getModel_num();
                row[8] = result.isMaintenance_certificate();
                dtm.addRow(row); 
                    
            }
        }else{
             JOptionPane.showMessageDialog(null, "no expire","Information",JOptionPane.INFORMATION_MESSAGE);

        }
       
    }//GEN-LAST:event_btnMutiSearch5ActionPerformed

    private void btnMutiSearch6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMutiSearch6ActionPerformed
        // TODO add your handling code here:
        
        List<Car> rs = new ArrayList<>();
       // ArrayList<Car> carList2= carInformation.searchMC(false);
        
        
        try{
            ArrayList<Car> carList2= carInformation.searchSeats(Integer.parseInt(txtSearch.getText()),Integer.parseInt(txtSearch2.getText()));
            Set<Car> set = new HashSet<Car>(carList2.size() > carl.size() ? carList2 : carl);
        
            for(Car i : carList2.size() > carl.size() ? carl:carList2)
            {
                if(set.contains(i))
                {
                    rs.add(i);
                }
            }
            
            if(rs.size()>0){
                DefaultTableModel dtm = (DefaultTableModel)tblCar.getModel();
                dtm.setRowCount(0);
                Object[] row = new Object[dtm.getColumnCount()];
               // carl.clear();
                for(Car result : rs){
                    row[0] = result;
                    row[1] = result.getBrand();
                    row[2] = result.getMin_seats();
                    row[3] = result.getMax_seats();
                    row[4] = result.isAvailable();
                    row[5] = result.getManufactured_year();
                    row[6] = result.getSerial_num();
                    row[7] = result.getModel_num();
                    row[8] = result.isMaintenance_certificate();
            
                    dtm.addRow(row);  
                    
                    
                   // carl.add(result);
                }
            
            }else{
                JOptionPane.showMessageDialog(null, "seats you entered does not exist","Information",JOptionPane.INFORMATION_MESSAGE);
   
            }
        
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Please type in a number for seats");
            return;
        }
    }//GEN-LAST:event_btnMutiSearch6ActionPerformed

    private void btnAvailCarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAvailCarActionPerformed
        // TODO add your handling code here:
        List<Car> rs = new ArrayList<>();
           ArrayList<Car> carList2= carInformation.searchIsAvail(true);
            Set<Car> set = new HashSet<Car>(carList2.size() > carl.size() ? carList2 : carl);
        
            for(Car i : carList2.size() > carl.size() ? carl:carList2)
            {
                if(set.contains(i))
                {
                    rs.add(i);
                }
            }
        
        if(rs.size()>0){
            DefaultTableModel dtm = (DefaultTableModel)tblCar.getModel();
            dtm.setRowCount(0);
            Object[] row = new Object[dtm.getColumnCount()];
            carl.clear();
            for(Car result : rs){
                row[0] = result;
                row[1] = result.getBrand();
                row[2] = result.getMin_seats();
                row[3] = result.getMax_seats();
                row[4] = result.isAvailable();
                row[5] = result.getManufactured_year();
                row[6] = result.getSerial_num();
                row[7] = result.getModel_num();
                row[8] = result.isMaintenance_certificate();
            
                dtm.addRow(row);
                //carl.add(result);
            }
        }else{
            JOptionPane.showMessageDialog(null, "no avail","Information",JOptionPane.INFORMATION_MESSAGE);
   
        } 
    }//GEN-LAST:event_btnAvailCarActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAvailCar;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnBrand;
    private javax.swing.JButton btnCertificate;
    private javax.swing.JButton btnCity;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnManufacturer;
    private javax.swing.JButton btnModel;
    private javax.swing.JButton btnMutiSearch;
    private javax.swing.JButton btnMutiSearch1;
    private javax.swing.JButton btnMutiSearch2;
    private javax.swing.JButton btnMutiSearch3;
    private javax.swing.JButton btnMutiSearch4;
    private javax.swing.JButton btnMutiSearch5;
    private javax.swing.JButton btnMutiSearch6;
    private javax.swing.JButton btnMyear;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSeats;
    private javax.swing.JButton btnSerial;
    private javax.swing.JButton btnViewDetails;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblCar;
    private javax.swing.JButton txtAvailNum;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtSearch2;
    // End of variables declaration//GEN-END:variables
}
