/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Userinterface.customer;

import Business.Customer.Customer;
import Business.EcoSystem;
import Business.Enterprise.BeautyEnterprise;
import Business.Enterprise.Enterprise;
import Business.Order.Item;
import Business.Order.Order;
import Business.Organization.CSROrganization;
import Business.Organization.Organization;
import Business.Organization.CustomerOrganization;
import Business.Product.Product;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.OrderReminderRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author wuxinyang
 */
public class OrderJPanel extends javax.swing.JPanel {

    /**
     * Creates new form OrderJPanel
     */
    
     private JPanel userProcessContainer;
     private BeautyEnterprise benterprise;
     private CustomerOrganization corganization;
    // private Enterprise enterprise;
     private EcoSystem business;
     private UserAccount account;
    OrderJPanel(JPanel userProcessContainer, Enterprise enterprise, UserAccount account, Organization organization, EcoSystem business) {
         initComponents();
        this.userProcessContainer= userProcessContainer;
        this.benterprise = (BeautyEnterprise)enterprise;
        this.corganization=(CustomerOrganization)organization;
       // this.enterprise=enterprise;
        this.business=business;
        this.account= account;
         customer.setText(account.getCustomer().getLname()+" "+ account.getCustomer().getFname());
         populateOrderTable();
         populateDelete();
         populateReminder();
    }
     
    
    
    
    public void populateOrderTable(){
        DefaultTableModel model = (DefaultTableModel) orderTbl.getModel();
        
        model.setRowCount(0);
         
        
       
      
            for (Order o : account.getCustomer().getOrderDir().getOrderList()){{
                
            Object[] row = new Object[4];
            row[0] = o;
          //  row[1] = customer.getFname() + " " + customer.getLname();
            row[1] = o.getDateCreated();             
            row[2] = o.getStatues();
            row[3] = o.getTotalprice();
          
            model.addRow(row);
            
            }
       } 
    
       }
    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        customer = new javax.swing.JLabel();
        back = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        detailBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderTbl = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        orderStatusCombo = new javax.swing.JComboBox<>();
        jScrollPane6 = new javax.swing.JScrollPane();
        itemTable = new javax.swing.JTable();
        productBtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        requestBtn = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        deleteCombo = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        reminderTbl = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        reminderCombo = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(255, 255, 204));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel1.setText("Order for: ");

        customer.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N

        back.setBackground(new java.awt.Color(255, 204, 204));
        back.setText("back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Order", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 14))); // NOI18N

        detailBtn.setBackground(new java.awt.Color(255, 204, 204));
        detailBtn.setText("view order detail");
        detailBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detailBtnActionPerformed(evt);
            }
        });

        orderTbl.setBackground(new java.awt.Color(255, 255, 204));
        orderTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "OrderId", "Date Created", "Status", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(orderTbl);

        jButton1.setBackground(new java.awt.Color(255, 204, 204));
        jButton1.setText("search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(255, 204, 204));
        jButton3.setText("view all");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        orderStatusCombo.setBackground(new java.awt.Color(255, 204, 204));
        orderStatusCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "pending", "shipped", "Returned" }));

        itemTable.setBackground(new java.awt.Color(255, 255, 204));
        itemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "Quantity", "Price", "Type", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(itemTable);

        productBtn.setBackground(new java.awt.Color(255, 204, 204));
        productBtn.setText("view Product detail");
        productBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(87, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(productBtn)
                    .addComponent(detailBtn)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane6)
                        .addComponent(jScrollPane1)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(orderStatusCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addGap(15, 15, 15))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(orderStatusCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(detailBtn)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(productBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Delete Request", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 14))); // NOI18N

        jTable1.setBackground(new java.awt.Color(255, 255, 204));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "OrderId", "Date Request", "Request Message", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable1);

        requestBtn.setBackground(new java.awt.Color(255, 204, 204));
        requestBtn.setText("Request Delete");
        requestBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestBtnActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(255, 204, 204));
        jButton4.setText("search");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(255, 204, 204));
        jButton5.setText("view all");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        deleteCombo.setBackground(new java.awt.Color(255, 204, 204));
        deleteCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Waiting", "Canceled" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(requestBtn)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 487, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                        .addComponent(deleteCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton5)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(deleteCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(requestBtn)
                .addGap(18, 18, 18))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 204));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Reminder Request", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 14))); // NOI18N

        reminderTbl.setBackground(new java.awt.Color(255, 255, 204));
        reminderTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "OrderId", "Date Reminder", "Reminder Message", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(reminderTbl);

        jButton2.setBackground(new java.awt.Color(255, 204, 204));
        jButton2.setText("Reminder");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(255, 204, 204));
        jButton6.setText("view all");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setBackground(new java.awt.Color(255, 204, 204));
        jButton7.setText("search");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        reminderCombo.setBackground(new java.awt.Color(255, 204, 204));
        reminderCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "processing", "processed" }));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(reminderCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jButton7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton6, javax.swing.GroupLayout.Alignment.LEADING)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(reminderCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6)
                        .addGap(39, 39, 39))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addComponent(jButton2)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(customer, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(back)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(customer, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(26, 26, 26)
                .addComponent(back)
                .addContainerGap(47, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void detailBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detailBtnActionPerformed
        // TODO add your handling code here:
        int selectedrow = orderTbl.getSelectedRow();
        if(selectedrow<0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        Order order = (Order)orderTbl.getValueAt(selectedrow, 0);
        int id = order.getOrderId();
        DefaultTableModel model = (DefaultTableModel) itemTable.getModel();
        model.setRowCount(0);
        
        
        
            for(Order o : account.getCustomer().getOrderDir().getOrderList()){
                if(o.getOrderId()==id){
                    for(Item item : o.getOrderItemList()){
                        Object[] row = new Object[5];
                        row[0] = item.getProduct();
                        row[1] = item.getQuatity();
                        row[2] = item.getProduct().getSalesPrice(); 
                        row[3] = item.getProduct().getType();
                        row[4] = item.getQuatity() * item.getProduct().getSalesPrice();
                        model.addRow(row);
                    }

                

            }
        }

    }//GEN-LAST:event_detailBtnActionPerformed

    private void productBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productBtnActionPerformed
        // TODO add your handling code here:
          int row = itemTable.getSelectedRow();
        if(row<0) {
             JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        Product p = (Product)itemTable.getValueAt(row, 0);
         
        
        
        itemDetailJPanel pd = new itemDetailJPanel(userProcessContainer,benterprise,p);
        userProcessContainer.add("itemDetailJPanel", pd);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        
        
        
    }//GEN-LAST:event_productBtnActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
        
        
    }//GEN-LAST:event_backActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int selectedRow = reminderTbl.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

       

        OrderReminderRequest request = (OrderReminderRequest)reminderTbl.getValueAt(selectedRow, 0);
       if( request.equals("Please Processing")   ){
           JOptionPane.showMessageDialog(null, "Already reminder!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
       } else if( request.getStatus().equals("shipped")   ){
           JOptionPane.showMessageDialog(null, "Already shipped!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
       }else if( request.getStatus().equals("Canceled")   ){
           JOptionPane.showMessageDialog(null, "Already canceled!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
       }else if( request.getStatus().equals("Returned")   ){
           JOptionPane.showMessageDialog(null, "Already returned!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;              
       }
        
        
        ((OrderReminderRequest)request).setMessage("Please Processing");
        
        populateReminder();

    }//GEN-LAST:event_jButton2ActionPerformed

    private void requestBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
         
       
         

        //   Order order = (Order)orderTbl.getValueAt(selectedRow, 0);

        OrderReminderRequest request = (OrderReminderRequest)jTable1.getValueAt(selectedRow, 0);
        
        if( request.getStatus().equals("shipped")   ){
           JOptionPane.showMessageDialog(null, "Already shipped,can't cancel!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
       }else if( request.getDeleteMessage().equals("Please Cancel")   ){
           JOptionPane.showMessageDialog(null, "Already request!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
       } else if( request.getStatus().equals("Canceled")   ){
           JOptionPane.showMessageDialog(null, "Already canceled!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
       }else if( request.getStatus().equals("Returned")   ){
           JOptionPane.showMessageDialog(null, "Already returned!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;              
       }
        
        
        
        
        //    request.setOrderId(order.getOrderId());
        request.setDeleteMessage("Please Cancel");
       
        request.setDeleteStatus("Waiting");
        Organization org = null;
        for (Organization organization : benterprise.getOrganizationDirectory().getOrganizationList()){
            if (organization instanceof CSROrganization){
                org = organization;
                break;

            }
        }
        if (org!=null){
            org.getWorkQueue().getWorkRequestList().add(request);
           

            populateDelete();

        }

    }//GEN-LAST:event_requestBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
         if(orderStatusCombo.getSelectedItem().equals("pending")){
             DefaultTableModel model = (DefaultTableModel) orderTbl.getModel();
        
        model.setRowCount(0);

            for (Order o : account.getCustomer().getOrderDir().getOrderList()){{
            if(o.getStatues().equals("pending")){
            Object[] row = new Object[4];
            row[0] = o;
          //  row[1] = customer.getFname() + " " + customer.getLname();
            row[1] = o.getDateCreated();             
            row[2] = o.getStatues();
            row[3] = o.getTotalprice();
            model.addRow(row);
            
            }
            }
       } 
    
         
        
       
      
        }else if(orderStatusCombo.getSelectedItem().equals("shipped")){
            DefaultTableModel model = (DefaultTableModel) orderTbl.getModel();
        
        model.setRowCount(0);
         
        
       
       
            for (Order o : account.getCustomer().getOrderDir().getOrderList()){{
                  if(o.getStatues().equals("shipped")){
            Object[] row = new Object[4];
            row[0] = o;
          //  row[1] = customer.getFname() + " " + customer.getLname();
            row[1] = o.getDateCreated();             
            row[2] = o.getStatues();
            row[3] = o.getTotalprice();
            model.addRow(row);
            
            
            }
       } 
    }
        }
        else if(orderStatusCombo.getSelectedItem().equals("Returned")){
            DefaultTableModel model = (DefaultTableModel) orderTbl.getModel();
        
        model.setRowCount(0);
         
        
       
       
            for (Order o : account.getCustomer().getOrderDir().getOrderList()){{
             if(o.getStatues().equals("Returned")){
            Object[] row = new Object[4];
            row[0] = o;
          //  row[1] = customer.getFname() + " " + customer.getLname();
            row[1] = o.getDateCreated();             
            row[2] = o.getStatues();
            row[3] = o.getTotalprice();
          
            model.addRow(row);
              
          
            }
       } 
    }
        }
        
        
        
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
         if(deleteCombo.getSelectedItem().equals("Waiting")){
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);  
       for(WorkRequest request : account.getWorkQueue().getWorkRequestList()){
          if(request instanceof OrderReminderRequest){
           if(((OrderReminderRequest)request).getDeleteStatus().equals("Waiting")){
               
            Object[] row = new Object[4];
            row[0] = (OrderReminderRequest)request;
            row[1] = ((OrderReminderRequest)request).getRequestCreated();
            row[2] = ((OrderReminderRequest)request).getDeleteMessage();
            row[3] = ((OrderReminderRequest)request).getStatus();
            model.addRow(row);  
    }
       }
       }
        }else if(deleteCombo.getSelectedItem().equals("Canceled")){
              DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
              model.setRowCount(0);  
       for(WorkRequest request : account.getWorkQueue().getWorkRequestList()){
          if(request instanceof OrderReminderRequest){
           if(((OrderReminderRequest)request).getStatus().equals("Canceled")){
               
            Object[] row = new Object[4];
            row[0] = (OrderReminderRequest)request;
            row[1] = ((OrderReminderRequest)request).getRequestCreated();
            row[2] = ((OrderReminderRequest)request).getDeleteMessage();
            row[3] = ((OrderReminderRequest)request).getStatus();
            model.addRow(row);  
    }
       }
        }
        }  
        
        
        
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        if(reminderCombo.getSelectedItem().equals("processing")){
        DefaultTableModel model = (DefaultTableModel) reminderTbl.getModel();        
        model.setRowCount(0); 
        for(WorkRequest request : account.getWorkQueue().getWorkRequestList()){ 
            if(request instanceof OrderReminderRequest){
            if(((OrderReminderRequest)request).getMessage().equals("Please Processing")){
            Object[] row = new Object[5];
            row[0] = request;
            row[1] = ((OrderReminderRequest)request).getReminderCreated();
            row[2] = ((OrderReminderRequest)request).getMessage();
            row[3] = ((OrderReminderRequest)request).getStatus();
            model.addRow(row);
            } 
            
            
       } 
    }
               
        }
        else if(reminderCombo.getSelectedItem().equals("processed")){
            DefaultTableModel model = (DefaultTableModel) reminderTbl.getModel();
            model.setRowCount(0);
            for(WorkRequest request : account.getWorkQueue().getWorkRequestList()){ 
                if(request instanceof OrderReminderRequest){
                if(((OrderReminderRequest)request).getMessage().equals("Processed")){
                Object[] row = new Object[5];
                row[0] = request;
                row[1] = ((OrderReminderRequest)request).getReminderCreated();
                row[2] = ((OrderReminderRequest)request).getMessage();
                row[3] = ((OrderReminderRequest)request).getStatus();
                model.addRow(row);
            
                }
            
       } 
    }
        }
        
        
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        populateOrderTable();
         
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
       
         populateDelete();
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        
         populateReminder();
    }//GEN-LAST:event_jButton6ActionPerformed
public void populateReminder(){
       DefaultTableModel model = (DefaultTableModel) reminderTbl.getModel();
       model.setRowCount(0);       
       for(WorkRequest request : account.getWorkQueue().getWorkRequestList()){
            if (request instanceof OrderReminderRequest){
                if(((OrderReminderRequest) request).getCustomerName().equals(account.getCustomer().getLname()+" "+ account.getCustomer().getFname())){
            Object[] row = new Object[4];
            row[0] = (OrderReminderRequest)request;
            row[1] = ((OrderReminderRequest)request).getReminderCreated();
            row[2] = ((OrderReminderRequest)request).getMessage();
            row[3] = ((OrderReminderRequest)request).getStatus();
            model.addRow(row);   
            }
            }
    }
  }
  
   public void populateDelete(){
       DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
       model.setRowCount(0);  
       for(WorkRequest request : account.getWorkQueue().getWorkRequestList()){ 
        if (request instanceof OrderReminderRequest){  
            if(((OrderReminderRequest) request).getCustomerName().equals(account.getCustomer().getLname()+" "+ account.getCustomer().getFname())){
            Object[] row = new Object[4];
        //    System.out.println(account.getWorkQueue().getWorkRequestList());
            row[0] = (OrderReminderRequest)request;
            row[1] = ((OrderReminderRequest)request).getRequestCreated();
            row[2] = ((OrderReminderRequest)request).getDeleteMessage();
            row[3] = ((OrderReminderRequest)request).getStatus();
            model.addRow(row);  
        }
    }
       }
  }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JLabel customer;
    private javax.swing.JComboBox<String> deleteCombo;
    private javax.swing.JButton detailBtn;
    private javax.swing.JTable itemTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTable jTable1;
    private javax.swing.JComboBox<String> orderStatusCombo;
    private javax.swing.JTable orderTbl;
    private javax.swing.JButton productBtn;
    private javax.swing.JComboBox<String> reminderCombo;
    private javax.swing.JTable reminderTbl;
    private javax.swing.JButton requestBtn;
    // End of variables declaration//GEN-END:variables
}
