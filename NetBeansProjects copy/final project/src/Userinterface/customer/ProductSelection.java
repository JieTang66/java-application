/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Userinterface.customer;

import Interface.dior.CSR.*;
import Business.Customer.Customer;
import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Enterprise.BeautyEnterprise;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Order.Item;
import Business.Order.Order;
import Business.Organization.CSROrganization;
import Business.Organization.Organization;
import Business.Organization.WarehouseOrganization;
import Business.Organization.CustomerOrganization;
import Business.Product.Product;
import Business.Product.Product.eyeType;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.OrderReminderRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.awt.Image;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author too
 */
public class ProductSelection extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private UserAccount account;
   // private Customer c;
    private CSROrganization csrOrganization;
    private BeautyEnterprise benterprise;
    private Order order;
    private boolean isCheckedOut=false;
   

    ProductSelection(JPanel userProcessContainer, Enterprise enterprise, UserAccount account, Organization organization, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account; 
        this.csrOrganization = (CSROrganization)organization;
        this.benterprise=(BeautyEnterprise)enterprise;
        populateProductTable();
        cancelBtn.setEnabled(false);
        customer.setText("Customer: "+account.getCustomer().getLname()+" "+ account.getCustomer().getFname());
        ImageIcon icon=new ImageIcon(account.getCustomer().getPath());
        icon.setImage(icon.getImage().getScaledInstance(120,130,Image.SCALE_DEFAULT));
        Picture.setIcon(icon);
        
        if(!isCheckedOut)
        this.order= new Order();
        
        
       
    }
    
    
    
     
    
    
     
    
    
     public void populateProductTable(){
        DefaultTableModel model = (DefaultTableModel) ProductTable.getModel();
        
        model.setRowCount(0);
     
        for (Product p : benterprise.getProductDir().getProductList()){ 
            
        //   System.out.println(p.getType()); 
       //    System.out.println(benterprise);
            Object[] row = new Object[5];
            row[0] = p;
            row[1] = p.getProductId(); 
            row[2] = p.getAvailNum(); 
            row[3] = p.getSalesPrice();   
            row[4] = p.getType(); 
            model.addRow(row);
        }
    
     }
     
     public void refreshCartTable(){
        DefaultTableModel model = (DefaultTableModel)orderTbl.getModel();
        model.setRowCount(0);        
        double price = 0;
   
    
        {
        for(Item oi: order.getOrderItemList())
        {
           
        
            Object row[] = new Object[4];
            row[0] = oi;
            row[1] = oi.getProduct().getSalesPrice();
            row[2] = oi.getQuatity();
            row[3] = oi.getQuatity()*oi.getProduct().getSalesPrice();
            model.addRow(row); 
            price += oi.getQuatity()*oi.getProduct().getSalesPrice();
            total.setText(String.valueOf(price));
        
        
      
       }
       }
     }
    
     public void poputypeCombo(){
       // typeComboBox.removeAllItems();
        subtypeComboBox.removeAllItems();
        
        if(String.valueOf(typeComboBox.getSelectedItem()).equalsIgnoreCase("Face")){
            for (Product.faceType facetype : Product.faceType.values()){
                subtypeComboBox.addItem(facetype);
                
                
        }
        }else if(String.valueOf(typeComboBox.getSelectedItem()).equalsIgnoreCase("Lip")){
            for (Product.lipType liptype : Product.lipType.values()){
                subtypeComboBox.addItem(liptype);
            }
        }else if(String.valueOf(typeComboBox.getSelectedItem()).equalsIgnoreCase("Eye")){
            for (Product.eyeType eyetype : Product.eyeType.values()){
                subtypeComboBox.addItem(eyetype);
            }  
        }   
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderTbl = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        typeComboBox = new javax.swing.JComboBox();
        subtypeComboBox = new javax.swing.JComboBox();
        checkBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        ProductTable = new javax.swing.JTable();
        total = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        viewTable = new javax.swing.JButton();
        addtoCartButton6 = new javax.swing.JButton();
        quantitySpinner = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        btnRemoveOrderItem = new javax.swing.JButton();
        detailBtn = new javax.swing.JButton();
        customer = new javax.swing.JLabel();
        promoTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        applyBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        Picture = new javax.swing.JLabel();
        searchTypeBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 204));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel1.setText("Product Selection");

        orderTbl.setBackground(new java.awt.Color(255, 255, 204));
        orderTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Price", "Quantity", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(orderTbl);
        if (orderTbl.getColumnModel().getColumnCount() > 0) {
            orderTbl.getColumnModel().getColumn(0).setResizable(false);
            orderTbl.getColumnModel().getColumn(1).setResizable(false);
            orderTbl.getColumnModel().getColumn(2).setResizable(false);
            orderTbl.getColumnModel().getColumn(3).setResizable(false);
        }

        btnBack.setBackground(new java.awt.Color(255, 204, 204));
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        typeComboBox.setBackground(new java.awt.Color(255, 204, 204));
        typeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Face", "Eye", "Lip" }));
        typeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeComboBoxActionPerformed(evt);
            }
        });

        subtypeComboBox.setBackground(new java.awt.Color(255, 204, 204));
        subtypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subtypeComboBoxActionPerformed(evt);
            }
        });

        checkBtn.setBackground(new java.awt.Color(255, 255, 255));
        checkBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Userinterface/customer/WechatIMG12.jpeg"))); // NOI18N
        checkBtn.setText("Check Out");
        checkBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBtnActionPerformed(evt);
            }
        });

        ProductTable.setBackground(new java.awt.Color(255, 255, 204));
        ProductTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "name", "id", "availNum", "Price", "type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(ProductTable);

        jLabel2.setText("Total:");

        viewTable.setBackground(new java.awt.Color(255, 204, 204));
        viewTable.setText("View All");
        viewTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewTableActionPerformed(evt);
            }
        });

        addtoCartButton6.setBackground(new java.awt.Color(255, 204, 204));
        addtoCartButton6.setText("ADD TO CART");
        addtoCartButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addtoCartButton6ActionPerformed(evt);
            }
        });

        quantitySpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Quantity:");

        btnRemoveOrderItem.setBackground(new java.awt.Color(255, 204, 204));
        btnRemoveOrderItem.setText("Remove from Cart");
        btnRemoveOrderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveOrderItemActionPerformed(evt);
            }
        });

        detailBtn.setBackground(new java.awt.Color(255, 204, 204));
        detailBtn.setText("view detail");
        detailBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detailBtnActionPerformed(evt);
            }
        });

        customer.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        customer.setText("Customer name");

        jLabel3.setText("Promo Code:");

        applyBtn.setBackground(new java.awt.Color(255, 204, 204));
        applyBtn.setText("Apply");
        applyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyBtnActionPerformed(evt);
            }
        });

        cancelBtn.setBackground(new java.awt.Color(255, 204, 204));
        cancelBtn.setText("cancel");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        searchTypeBtn.setBackground(new java.awt.Color(255, 204, 204));
        searchTypeBtn.setText("search");
        searchTypeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTypeBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(545, 545, 545)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(404, 404, 404)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(promoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(applyBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(77, 77, 77)
                                .addComponent(addtoCartButton6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRemoveOrderItem))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBack)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(9, 9, 9))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addComponent(checkBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Picture, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(customer, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(36, 36, 36)
                        .addComponent(subtypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchTypeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(viewTable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(detailBtn)))
                .addContainerGap(481, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(jLabel1)
                        .addGap(123, 123, 123)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(subtypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchTypeBtn)
                            .addComponent(viewTable)
                            .addComponent(detailBtn)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(customer, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(Picture, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(addtoCartButton6)
                        .addComponent(btnRemoveOrderItem))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(promoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(applyBtn)
                    .addComponent(cancelBtn)
                    .addComponent(jLabel3))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBack)
                    .addComponent(checkBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
         if(order.getOrderItemList().size()>0){
             JOptionPane.showMessageDialog(null, "Please remove products from the cart","Warning",JOptionPane.WARNING_MESSAGE);
             return;
         }else{
             backAction();
         }
        
        
        
     //  backAction();
    }//GEN-LAST:event_btnBackActionPerformed

    private void checkBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBtnActionPerformed
        // TODO add your handling code here:
        
       
        if(order.getOrderItemList().size()>0){
        
         if(order.getTotalprice()==null) { 
         double tprice =0;
         for(Item oi: order.getOrderItemList()){
             
             tprice += oi.getQuatity()*oi.getProduct().getSalesPrice();
            order.setTotalprice(tprice);
          //  System.out.println(tprice);
         }
          
         } 
         
            
     

           
            
            order.setStatues("pending");
            order.setCustomer(account.getCustomer());
            
            
            OrderReminderRequest request = new OrderReminderRequest(); 
             request.setSender(account);
            
            request.setStatus(order.getStatues());
            request.setDateCreated(order.getDateCreated());
            request.setDeleteMessage(" ");
            request.setDeleteStatus(" ");
            request.setMessage(" ");
            request.setCustomerName(account.getCustomer().getLname()+" "+ account.getCustomer().getFname());
  
        
        
            Organization org = null;  
            for (Organization organization : benterprise.getOrganizationDirectory().getOrganizationList()){
                if (organization instanceof WarehouseOrganization){
                org = organization;
                break; 
                }
            }
        //    System.out.println(org);
            if (org!=null){
                org.getWorkQueue().getWorkRequestList().add(request);
                account.getWorkQueue().getWorkRequestList().add(request);
            }
            
            JOptionPane.showMessageDialog(null, "Order placed successfully");
            
            
            
            
           
            
            account.getCustomer().getOrderDir().addOrder(order);
            
            int count=0;
            for(Organization orga:benterprise.getOrganizationDirectory().getOrganizationList()){
                for(Customer c :orga.getCustomerDirectory().getCustomerList()){
            for(Order o: c.getOrderDir().getOrderList()){
                count++;
            }}}
            order.setCount(count);
            order.setOrderId(order.getCount());  
            ((OrderReminderRequest)request).setOrderId(order.getOrderId());
           // System.out.println(order.getTotalprice());
            
           
            
            
            order = new Order();
            refreshCartTable();
            populateProductTable();
            isCheckedOut = true;
            total.setText("0");

        }
            
        
    else{
            JOptionPane.showMessageDialog(null, "No order placed","Warning",JOptionPane.WARNING_MESSAGE);
            return;
    }
     //   }
    }//GEN-LAST:event_checkBtnActionPerformed

    private void typeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeComboBoxActionPerformed
        // TODO add your handling code here:
        poputypeCombo();
        
        
    }//GEN-LAST:event_typeComboBoxActionPerformed

    private void viewTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewTableActionPerformed
        // TODO add your handling code here:
         populateProductTable();
    }//GEN-LAST:event_viewTableActionPerformed

    private void subtypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subtypeComboBoxActionPerformed
        // TODO add your handling code here:
      
    }//GEN-LAST:event_subtypeComboBoxActionPerformed

    private void addtoCartButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addtoCartButton6ActionPerformed
        // TODO add your handling code here:
        int selectedRow = ProductTable.getSelectedRow();
        if(selectedRow<0)
        {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }
        Product selectedProduct = (Product)ProductTable.getValueAt(selectedRow, 0);
        int fetchQty = (Integer)quantitySpinner.getValue();
        if(fetchQty<=0){
            JOptionPane.showMessageDialog(null, "Quatity can not be less than or equal to 0");
            return;
        }
    //    try{

            if(fetchQty<=selectedProduct.getAvailNum()){
                boolean alreadyPresent = false;
             //   for(Order o: c.getOrderDir().getOrderList()){
                for(Item oi: order.getOrderItemList()){
                    if(oi.getProduct()==selectedProduct){
                        int oldAvail = selectedProduct.getAvailNum();
                        int newAvail = oldAvail - fetchQty;
                        selectedProduct.setAvailNum(newAvail);
                        oi.setQuatity(fetchQty+oi.getQuatity());
                        alreadyPresent = true;
                        populateProductTable();
                        refreshCartTable();
                        break;
                    }
                 //   oi.setCheckoutStatus("isntcheckout");
                }
                if(!alreadyPresent){
                    int oldAvail= selectedProduct.getAvailNum();
                    int newAvail = oldAvail - fetchQty;
                    selectedProduct.setAvailNum(newAvail);
                    order.addOrderItem(selectedProduct, fetchQty);
                    populateProductTable();
                    refreshCartTable();
                }
         //   }
            
            }
            else{
                JOptionPane.showMessageDialog(null, "Quantity>Availibility","Warning",JOptionPane.WARNING_MESSAGE);
            }
    //    }
//        catch(Exception e){
//            JOptionPane.showMessageDialog(null, "Invalid salesprice");
//            return;
    //    }

    }//GEN-LAST:event_addtoCartButton6ActionPerformed

    private void btnRemoveOrderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveOrderItemActionPerformed
        int row = orderTbl.getSelectedRow();
        if(row<0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        Item oi = (Item)orderTbl.getValueAt(row, 0);
        int oldAvail = oi.getProduct().getAvailNum();
        int oldQty=oi.getQuatity();
        int newQty=oldAvail+oldQty;
        oi.getProduct().setAvailNum(newQty);
    //    oi.setCheckoutStatus("isntcheckout");
      //  for(Order o:c.getOrderDir().getOrderList()){
        order.removeOrderItem(oi);
        
    //    }
        JOptionPane.showMessageDialog(null, "OrderItem removed from the cart");
        refreshCartTable();
        populateProductTable();

    }//GEN-LAST:event_btnRemoveOrderItemActionPerformed

    private void detailBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detailBtnActionPerformed
        // TODO add your handling code here:
          int row = ProductTable.getSelectedRow();
        if(row<0) {
             JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        Product p = (Product)ProductTable.getValueAt(row, 0);
        productDetail pd = new productDetail(userProcessContainer,benterprise,p);
        userProcessContainer.add("productDetail", pd);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        
    }//GEN-LAST:event_detailBtnActionPerformed

    private void applyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyBtnActionPerformed
        // TODO add your handling code here:
        
       
        if(promoTxt.getText().equals("promo50")){
            double promototal =0;
            for(Item oi: order.getOrderItemList()){
               
                
                oi.getProduct().setSalesPrice(oi.getProduct().getSalesPrice());
                promototal += (oi.getQuatity()*oi.getProduct().getSalesPrice()) -50;
                total.setText(String.valueOf(promototal));
                order.setTotalprice(promototal);
      
            }
            if(promototal<0){
                JOptionPane.showMessageDialog(null, "Total can not < 0", "Warning", JOptionPane.WARNING_MESSAGE);
                checkBtn.setEnabled(false);
                cancelBtn.setEnabled(true);
                applyBtn.setEnabled(false);
            return;
            }
        }if(promoTxt.getText().equals("promo20")){
            double promototal =0;
            for(Item oi: order.getOrderItemList()){
                oi.getProduct().setSalesPrice(oi.getProduct().getSalesPrice());
                promototal += (oi.getQuatity()*oi.getProduct().getSalesPrice()) -20;
                total.setText(String.valueOf(promototal));
                order.setTotalprice(promototal);
            }
            if(promototal<0){
                JOptionPane.showMessageDialog(null, "Total can not < 0", "Warning", JOptionPane.WARNING_MESSAGE);
                checkBtn.setEnabled(false);
                cancelBtn.setEnabled(true);
                applyBtn.setEnabled(false);
            return;
            }
        }if(promoTxt.getText().equals("promo10")){
            double promototal =0;
            for(Item oi: order.getOrderItemList()){
                oi.getProduct().setSalesPrice(oi.getProduct().getSalesPrice());
                promototal += (oi.getQuatity()*oi.getProduct().getSalesPrice()) -10;
                total.setText(String.valueOf(promototal));
                order.setTotalprice(promototal);
            }
            if(promototal<0){
                JOptionPane.showMessageDialog(null, "Total can not < 0", "Warning", JOptionPane.WARNING_MESSAGE);
                checkBtn.setEnabled(false);
                cancelBtn.setEnabled(true);
                applyBtn.setEnabled(false);
            return;
            }
        }if(promoTxt.getText().equals("promo100")){
            double promototal =0;
            for(Item oi: order.getOrderItemList()){
                oi.getProduct().setSalesPrice(oi.getProduct().getSalesPrice());
                promototal += (oi.getQuatity()*oi.getProduct().getSalesPrice())-100 ;
                total.setText(String.valueOf(promototal));
                order.setTotalprice(promototal);
            }
            if(promototal<0){
                JOptionPane.showMessageDialog(null, "Total can not < 0", "Warning", JOptionPane.WARNING_MESSAGE);
                checkBtn.setEnabled(false);
                cancelBtn.setEnabled(true);
                applyBtn.setEnabled(false);
            return;
            }
        }
//          double ptotal =0;
//        for(Item oi: order.getOrderItemList()){
//            ptotal += (oi.getQuatity()*oi.getProduct().getSalesPrice()) ;
//            if(promototal<0){
//                JOptionPane.showMessageDialog(null, "Total can not < 0", "Warning", JOptionPane.WARNING_MESSAGE);
//                checkBtn.setEnabled(false);
//                cancelBtn.setEnabled(true);
//                applyBtn.setEnabled(false);
//            return;
//            }
//            
//            
//        }
        
       
        
        
        
        
    }//GEN-LAST:event_applyBtnActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        // TODO add your handling code here:
        if(promoTxt.getText().equals("promo50")){
            double promototal =0;
            for(Item oi: order.getOrderItemList()){
               
                
                oi.getProduct().setSalesPrice(oi.getProduct().getSalesPrice());
                promototal += (oi.getQuatity()*oi.getProduct().getSalesPrice())+50 ;
                total.setText(String.valueOf(promototal));
                order.setTotalprice(promototal);
      
            }
        }if(promoTxt.getText().equals("promo20")){
            double promototal =0;
            for(Item oi: order.getOrderItemList()){
                oi.getProduct().setSalesPrice(oi.getProduct().getSalesPrice());
                promototal += (oi.getQuatity()*oi.getProduct().getSalesPrice()) +20;
                total.setText(String.valueOf(promototal));
                order.setTotalprice(promototal);
            }
        }if(promoTxt.getText().equals("promo10")){
            double promototal =0;
            for(Item oi: order.getOrderItemList()){
                oi.getProduct().setSalesPrice(oi.getProduct().getSalesPrice());
                promototal += (oi.getQuatity()*oi.getProduct().getSalesPrice())+10 ;
                total.setText(String.valueOf(promototal));
                order.setTotalprice(promototal);
            }
        }if(promoTxt.getText().equals("promo100")){
            double promototal =0;
            for(Item oi: order.getOrderItemList()){
                oi.getProduct().setSalesPrice(oi.getProduct().getSalesPrice());
                promototal += (oi.getQuatity()*oi.getProduct().getSalesPrice())+100 ;
                total.setText(String.valueOf(promototal));
                order.setTotalprice(promototal);
            }
        }
        checkBtn.setEnabled(true);
        cancelBtn.setEnabled(false);
        applyBtn.setEnabled(true);
        
        
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void searchTypeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTypeBtnActionPerformed
        // TODO add your handling code here:
    //    System.out.println(String.valueOf(subtypeComboBox.getSelectedItem()).equals("Eyebrow"));
         if(String.valueOf(subtypeComboBox.getSelectedItem()).equals("Eyebrow")){
            //  System.out.println(subtypeComboBox.getSelectedItem());
        DefaultTableModel model = (DefaultTableModel) ProductTable.getModel();
        model.setRowCount(0);
        for (Product p : benterprise.getProductDir().getProductList()){ 
          //  System.out.println(p.getType());
            if(p.getType().equalsIgnoreCase("Eyebrow")){
            Object[] row = new Object[5];
            row[0] = p;
            row[1] = p.getProductId(); 
            row[2] = p.getAvailNum(); 
            row[3] = p.getSalesPrice();
            row[4] = p.getType(); 
            model.addRow(row);
        }
        }
      }else
            if(String.valueOf(subtypeComboBox.getSelectedItem()).equals("Eyeshadow")){
          DefaultTableModel model = (DefaultTableModel) ProductTable.getModel();
        
        model.setRowCount(0);
        for (Product p : benterprise.getProductDir().getProductList()){ 
         //   System.out.println(p.getType());
            if(p.getType().equals("Eyeshadow")){
            Object[] row = new Object[5];
            row[0] = p;
            row[1] = p.getProductId(); 
            row[2] = p.getAvailNum(); 
            row[3] = p.getSalesPrice();
            row[4] = p.getType(); 
            model.addRow(row);
        }
        }
      } else
            if(String.valueOf(subtypeComboBox.getSelectedItem()).equals("Eyeliner")){
          DefaultTableModel model = (DefaultTableModel) ProductTable.getModel();
        
        model.setRowCount(0);
        for (Product p : benterprise.getProductDir().getProductList()){ 
         //   System.out.println(p.getType());
            if(p.getType().equals("Eyeliner")){
            Object[] row = new Object[5];
            row[0] = p;
            row[1] = p.getProductId(); 
            row[2] = p.getAvailNum(); 
            row[3] = p.getSalesPrice();
            row[4] = p.getType(); 
            model.addRow(row);
        }
        }
      } else
            if(String.valueOf(subtypeComboBox.getSelectedItem()).equals("Blush")){
          DefaultTableModel model = (DefaultTableModel) ProductTable.getModel();
        
        model.setRowCount(0);
        for (Product p : benterprise.getProductDir().getProductList()){ 
         //   System.out.println(p.getType());
            if(p.getType().equals("Blush")){
            Object[] row = new Object[5];
            row[0] = p;
            row[1] = p.getProductId(); 
            row[2] = p.getAvailNum(); 
            row[3] = p.getSalesPrice();
            row[4] = p.getType(); 
            model.addRow(row);
        }
        }
      } 
         else
            if(String.valueOf(subtypeComboBox.getSelectedItem()).equals("Foundation")){
          DefaultTableModel model = (DefaultTableModel) ProductTable.getModel();
        
        model.setRowCount(0);
        for (Product p : benterprise.getProductDir().getProductList()){ 
         //   System.out.println(p.getType());
            if(p.getType().equals("Foundation")){
            Object[] row = new Object[5];
            row[0] = p;
            row[1] = p.getProductId(); 
            row[2] = p.getAvailNum(); 
            row[3] = p.getSalesPrice();
            row[4] = p.getType(); 
            model.addRow(row);
        }
        }
      }  else
            if(String.valueOf(subtypeComboBox.getSelectedItem()).equals("Highlighter")){
          DefaultTableModel model = (DefaultTableModel) ProductTable.getModel();
        
        model.setRowCount(0);
        for (Product p : benterprise.getProductDir().getProductList()){ 
         //   System.out.println(p.getType());
            if(p.getType().equals("Highlighter")){
            Object[] row = new Object[5];
            row[0] = p;
            row[1] = p.getProductId(); 
            row[2] = p.getAvailNum(); 
            row[3] = p.getSalesPrice();
            row[4] = p.getType(); 
            model.addRow(row);
        }
        }
      } else
            if(String.valueOf(subtypeComboBox.getSelectedItem()).equals("Face Primer")){
          DefaultTableModel model = (DefaultTableModel) ProductTable.getModel();
        
        model.setRowCount(0);
        for (Product p : benterprise.getProductDir().getProductList()){ 
         //   System.out.println(p.getType());
            if(p.getType().equals("Face Primer")){
            Object[] row = new Object[5];
            row[0] = p;
            row[1] = p.getProductId(); 
            row[2] = p.getAvailNum(); 
            row[3] = p.getSalesPrice();
            row[4] = p.getType(); 
            model.addRow(row);
        }
        }
      } else
            if(String.valueOf(subtypeComboBox.getSelectedItem()).equals("Lipstick")){
          DefaultTableModel model = (DefaultTableModel) ProductTable.getModel();
        
        model.setRowCount(0);
        for (Product p : benterprise.getProductDir().getProductList()){ 
         //   System.out.println(p.getType());
            if(p.getType().equals("Lipstick")){
            Object[] row = new Object[5];
            row[0] = p;
            row[1] = p.getProductId(); 
            row[2] = p.getAvailNum(); 
            row[3] = p.getSalesPrice();
            row[4] = p.getType(); 
            model.addRow(row);
        }
        }
      } else
            if(String.valueOf(subtypeComboBox.getSelectedItem()).equals("Lip Gloss")){
          DefaultTableModel model = (DefaultTableModel) ProductTable.getModel();
        
        model.setRowCount(0);
        for (Product p : benterprise.getProductDir().getProductList()){ 
         //   System.out.println(p.getType());
            if(p.getType().equals("Lip Gloss")){
            Object[] row = new Object[5];
            row[0] = p;
            row[1] = p.getProductId(); 
            row[2] = p.getAvailNum(); 
            row[3] = p.getSalesPrice();
            row[4] = p.getType(); 
            model.addRow(row);
        }
        }
      } else
            if(String.valueOf(subtypeComboBox.getSelectedItem()).equals("Lip Liner")){
          DefaultTableModel model = (DefaultTableModel) ProductTable.getModel();
        
        model.setRowCount(0);
        for (Product p : benterprise.getProductDir().getProductList()){ 
         //   System.out.println(p.getType());
            if(p.getType().equals("Lip Liner")){
            Object[] row = new Object[5];
            row[0] = p;
            row[1] = p.getProductId(); 
            row[2] = p.getAvailNum(); 
            row[3] = p.getSalesPrice();
            row[4] = p.getType(); 
            model.addRow(row);
        }
        }
      } 
        
    }//GEN-LAST:event_searchTypeBtnActionPerformed
     private void backAction() {
         userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }
    
//     private void showRes(Map<Product, List<Product>> map) {
//        DefaultTableModel dtm = (DefaultTableModel) ProductTable.getModel();
//             dtm.setRowCount(0);
//             for(Product p:map.keySet()){
//                 List<Product> po = map.get(p);
//                 if(po.isEmpty()||p==null)
//                     continue;
//                 for(Product pro : po){
//                     if(pro==null)
//                         continue;
//                     Object[] row = new Object[5];
//                     row[0]= pro;
//                     row[1]= pro.getProductId();
//                     row[2]= pro.getAvailNum();
//                     row[3]= pro.getSalesPrice();
//                     dtm.addRow(row);
//                     
//                 }
//             } 
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Picture;
    private javax.swing.JTable ProductTable;
    private javax.swing.JButton addtoCartButton6;
    private javax.swing.JButton applyBtn;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnRemoveOrderItem;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JButton checkBtn;
    private javax.swing.JLabel customer;
    private javax.swing.JButton detailBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable orderTbl;
    private javax.swing.JTextField promoTxt;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JButton searchTypeBtn;
    private javax.swing.JComboBox subtypeComboBox;
    private javax.swing.JLabel total;
    private javax.swing.JComboBox typeComboBox;
    private javax.swing.JButton viewTable;
    // End of variables declaration//GEN-END:variables

   
    
}
